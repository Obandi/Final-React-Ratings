/*.rating:not(:checked) > label:hover, /* hover current star */
/*.rating:not(:checked) > label:hover ~ label { color: #FFD700;  } /* hover previous stars in list */

/*.rating > input:checked + label:hover, /* hover current star when changing rating */
/*.rating > input:checked ~ label:hover,
.rating > label:hover ~ input:checked ~ label, /* lighten current selection */

FFD700



<input type="radio" id="star5" name="rating" value="5" /><label className = "full" htmlFor="star5" title="Awesome - 5 stars"></label>
<input type="radio" id="star4" name="rating" value="4" /><label className = "full" htmlFor="star4" title="Pretty good - 4 stars"></label>
<input type="radio" id="star3" name="rating" value="3" /><label className = "full" htmlFor="star3" title="Meh - 3 stars"></label>
<input type="radio" id="star2" name="rating" value="2" /><label className = "full" htmlFor="star2" title="Kinda bad - 2 stars"></label>
<input type="radio" id="star1" name="rating" value="1" /><label className = "full" htmlFor="star1" title="Sucks big time - 1 star"></label>


(<div><input type="radio" id="star5" name="rating" value="5" /> key = {i}</div>)



starbox.push(<img src={i < rating ? fstar: bstar} onClick= {(key)=>{console.log("key = "+ key); this.props.onClick(key);}} width= "20" height= "20" data-key={key} />);

let rating = this.props.rating;
let mystars = this.makeStars(rating,5);



<div>
  <h1>Ratings Widget</h1>
    <RatingWidget rating = {this.state.rating}
     onClick = {event => this.setState ({rating: event.target.getAttribute('data-key')})}/>
  </div>


  makeStars(rating, numStars) {
	let starbox = [];
	let bstar = "../Images/unclicked.jpg";
	let fstar = "../Images/clicked.jpg";
	for (let i = 0; i <numStars; i++){
		starbox.push(<img src={i < rating ? fstar: bstar} onClick = {this.props.onClick} data-key={(i+1)} width= "20" height= "20" key={i} />)
		}
	return starbox;
 	}
 }




 function mapStateToProps(state) {
   return {
     ratings: state.ratings
   };
 }

 function mapDispatchToProps(dispatch) {
   return bindActionCreators({selectRating:selectRating}, dispatch)
 }

 export default connect (mapStateToProps, mapDispatchToProps)(SelectField);


 return {
   type: 'RATING_SELECTED',
   payload: [sid, boxValue]
 }
